on:
  push:
  pull_request:

jobs:
  macos13:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Cache Homebrew downloads
        id: cache-brew-13
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /Users/runner/Library/Caches/Homebrew
          key: brew-cache-${{ runner.os }}-mac13-v1
          restore-keys: |
            brew-cache-${{ runner.os }}-mac13-

      - name: Cache ccache
        id: cache-ccache-13
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-mac13-v1-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-mac13-v1-

      - name: Cache Boost tap build (macOS 13)
        id: cache-boost13
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/Cellar/boost176
          key: boost176-${{ runner.os }}-mac13-v1-${{ hashFiles('depends/homebrew-formulas/boost176.rb') }}
          restore-keys: |
            boost176-${{ runner.os }}-mac13-

      - name: Cache Protobuf tap build (macOS 13)
        id: cache-protobuf13
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/Cellar/protobuf261
          key: protobuf261-${{ runner.os }}-mac13-v1-${{ hashFiles('depends/homebrew-formulas/protobuf261.rb') }}
          restore-keys: |
            protobuf261-${{ runner.os }}-mac13-

      - name: git config credential.helper
        run: git config credential.helper

      - name: Brew install base dependencies
        run: |
          # A workaround for "The `brew link` step did not complete successfully" error.
          brew install --quiet python@3 || brew link --overwrite python@3
          brew install --quiet automake berkeley-db@4 miniupnpc qt@5 gperf qrencode librsvg ccache

      - name: Brew link dependencies
        run: brew link qt@5 berkeley-db@4

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
          # Use ccache-wrapped compilers for the build
          echo "CC=ccache clang" >> $GITHUB_ENV
          echo "CXX=ccache clang++" >> $GITHUB_ENV
        env:
          CCACHE_DIR: ~/.ccache

      - name: Show current directory
        run: |
          pwd
          git rev-parse --short HEAD
          ls -lah
          ls -lah depends || true
          ls -lah depends/homebrew-formulas || true

      - name: Create local tap & stage protobuf261.rb
        run: |
          set -euo pipefail
          brew tap-new vergecurrency/local
          TAP_DIR="$(brew --repo vergecurrency/local)"
          echo "Tap dir: $TAP_DIR"
          mkdir -p "$TAP_DIR/Formula"
          FORMULA_LOCAL="depends/homebrew-formulas/protobuf261.rb"
          if [ -f "$FORMULA_LOCAL" ]; then
            echo "Using local $FORMULA_LOCAL"
            cp "$FORMULA_LOCAL" "$TAP_DIR/Formula/"
          else
            echo "Local formula not found; fetching from repo"
            REF="${GITHUB_REF_NAME:-master}"
            URL="https://raw.githubusercontent.com/vergecurrency/verge/${REF}/depends/homebrew-formulas/protobuf261.rb"
            echo "Fetching: $URL"
            curl -fL "$URL" -o "$TAP_DIR/Formula/protobuf261.rb"
          fi

          echo "Current taps:"
          brew tap

      - name: Install protobuf261 via tap
        run: brew install vergecurrency/local/protobuf261

      - name: Stage boost176.rb into existing tap
        run: |
          set -euo pipefail
          if ! brew tap | grep -q '^vergecurrency/local$'; then
            brew tap-new vergecurrency/local
          fi
          TAP_DIR="$(brew --repo vergecurrency/local)"
          echo "Tap dir: $TAP_DIR"
          mkdir -p "$TAP_DIR/Formula"
          FORMULA_LOCAL="depends/homebrew-formulas/boost176.rb"
          if [ -f "$FORMULA_LOCAL" ]; then
            echo "Using local $FORMULA_LOCAL"
            cp "$FORMULA_LOCAL" "$TAP_DIR/Formula/"
          else
            echo "Local formula not found; fetching from repo"
            REF="${GITHUB_REF_NAME:-master}"
            URL="https://raw.githubusercontent.com/vergecurrency/verge/${REF}/depends/homebrew-formulas/boost176.rb"
            echo "Fetching: $URL"
            curl -fL "$URL" -o "$TAP_DIR/Formula/boost176.rb"
          fi
          echo "Current taps:"
          brew tap

      - name: Install boost176 via tap
        run: brew install vergecurrency/local/boost176

      - name: Set Boost 1.76 env (macOS 13)
        run: |
          BOOST_PREFIX="$(brew --prefix boost176)"
          echo "BOOST_ROOT=$BOOST_PREFIX" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=$BOOST_PREFIX/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$BOOST_PREFIX/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$BOOST_PREFIX/include $CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=-L$BOOST_PREFIX/lib $LDFLAGS" >> $GITHUB_ENV
          echo "Using BOOST at: $BOOST_PREFIX"
          ls -lah "$BOOST_PREFIX/lib" | grep -E 'boost_filesystem|filesystem' || true

      - name: which clang/xcode
        run: clang --version

      - name: Auto generate
        run: ./autogen.sh

      - name: configure
        run: |
          ./configure \
            --enable-scrypt-sse2 \
            --disable-bench \
            --disable-tests \
            --disable-dependency-tracking \
            --disable-werror \
            --with-gui \
            --with-boost="$BOOST_ROOT" \
            --with-boost-libdir="$BOOST_LIBRARYDIR" \
            --bindir="$(pwd)/release/bin" \
            --libdir="$(pwd)/release/lib"

      - name: Free up memory (optional)
        run: |
          sudo purge || true  # purge helps clear memory cache (no guarantee)

      - name: make
        run: make -j2

      - name: make .dmg
        run: make deploy

      - uses: actions/upload-artifact@v4
        with:
          name: verge-macos13
          path: |
            *.dmg

  macos14:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Cache Homebrew downloads
        id: cache-brew-14
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /Users/runner/Library/Caches/Homebrew
          key: brew-cache-${{ runner.os }}-mac14-v1
          restore-keys: |
            brew-cache-${{ runner.os }}-mac14-

      - name: Cache ccache
        id: cache-ccache-14
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-mac14-v1-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-mac14-v1-

      - name: Cache Boost tap build (macOS 14)
        id: cache-boost14
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar/boost176
          key: boost176-${{ runner.os }}-mac14-v1-${{ hashFiles('depends/homebrew-formulas/boost176.rb') }}
          restore-keys: |
            boost176-${{ runner.os }}-mac14-

      - name: Cache Protobuf tap build (macOS 14)
        id: cache-protobuf14
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar/protobuf261
          key: protobuf261-${{ runner.os }}-mac14-v1-${{ hashFiles('depends/homebrew-formulas/protobuf261.rb') }}
          restore-keys: |
            protobuf261-${{ runner.os }}-mac14-

      - name: git config credential.helper
        run: git config credential.helper

      - name: get previous xcode and switch to it
        run: ls -la /Applications/Xcode* && sudo xcode-select -switch /Applications/Xcode_15.2.app

      - name: Brew install base dependencies
        run: |
          # A workaround for "The `brew link` step did not complete successfully" error.
          brew install --quiet python@3 || brew link --overwrite python@3
          brew install --quiet automake autoconf berkeley-db@4 pkg-config miniupnpc zeromq libtool qt@5 gperf qrencode librsvg ccache

      - name: Brew link dependencies
        run: brew link qt@5 berkeley-db@4

      - name: check cellar for openssl
        run: cd /opt/homebrew/Cellar/openssl@3/ && ls

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
          echo "CC=ccache clang" >> $GITHUB_ENV
          echo "CXX=ccache clang++" >> $GITHUB_ENV
        env:
          CCACHE_DIR: ~/.ccache

      - name: Show current directory
        run: |
          pwd
          git rev-parse --short HEAD
          ls -lah
          ls -lah depends || true
          ls -lah depends/homebrew-formulas || true

      - name: Create local tap & stage protobuf261.rb
        run: |
          set -euo pipefail
          brew tap-new vergecurrency/local
          TAP_DIR="$(brew --repo vergecurrency/local)"
          echo "Tap dir: $TAP_DIR"
          mkdir -p "$TAP_DIR/Formula"
          FORMULA_LOCAL="depends/homebrew-formulas/protobuf261.rb"
          if [ -f "$FORMULA_LOCAL" ]; then
            echo "Using local $FORMULA_LOCAL"
            cp "$FORMULA_LOCAL" "$TAP_DIR/Formula/"
          else
            echo "Local formula not found; fetching from repo"
            REF="${GITHUB_REF_NAME:-master}"
            URL="https://raw.githubusercontent.com/vergecurrency/verge/${REF}/depends/homebrew-formulas/protobuf261.rb"
            echo "Fetching: $URL"
            curl -fL "$URL" -o "$TAP_DIR/Formula/protobuf261.rb"
          fi

          echo "Current taps:"
          brew tap

      - name: Install protobuf261 via tap
        run: brew install vergecurrency/local/protobuf261

      - name: Stage boost176.rb into existing tap
        run: |
          set -euo pipefail
          if ! brew tap | grep -q '^vergecurrency/local$'; then
            brew tap-new vergecurrency/local
          fi
          TAP_DIR="$(brew --repo vergecurrency/local)"
          echo "Tap dir: $TAP_DIR"
          mkdir -p "$TAP_DIR/Formula"
          FORMULA_LOCAL="depends/homebrew-formulas/boost176.rb"
          if [ -f "$FORMULA_LOCAL" ]; then
            echo "Using local $FORMULA_LOCAL"
            cp "$FORMULA_LOCAL" "$TAP_DIR/Formula/"
          else
            echo "Local formula not found; fetching from repo"
            REF="${GITHUB_REF_NAME:-master}"
            URL="https://raw.githubusercontent.com/vergecurrency/verge/${REF}/depends/homebrew-formulas/boost176.rb"
            echo "Fetching: $URL"
            curl -fL "$URL" -o "$TAP_DIR/Formula/boost176.rb"
          fi
          echo "Current taps:"
          brew tap

      - name: Install boost176 via tap
        run: brew install vergecurrency/local/boost176

      - name: Set Boost 1.76 env
        run: |
          BOOST_PREFIX="$(brew --prefix boost176)"
          echo "BOOST_ROOT=$BOOST_PREFIX" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=$BOOST_PREFIX/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$BOOST_PREFIX/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$BOOST_PREFIX/include $CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=-L$BOOST_PREFIX/lib $LDFLAGS" >> $GITHUB_ENV

      - name: which clang/xcode
        run: clang --version

      - name: Auto generate
        run: ./autogen.sh

      - name: configure
        run: ./configure --disable-bench --disable-tests --disable-dependency-tracking --disable-werror --with-gui --bindir=`pwd`/release/bin --libdir=`pwd`/release/lib --with-openssl-dir=/opt/homebrew/Cellar/openssl@3/3.5.2 --with-libevent-dir=/opt/homebrew/Cellar/libevent/2.1.12_1 --with-boost="$BOOST_ROOT" --with-boost-libdir="$BOOST_LIBRARYDIR"

      - name: make
        run: make -j4

      - name: make .dmg
        run: |
          make deploy

      - uses: actions/upload-artifact@v4
        with:
          name: verge-macos14
          path: |
            *.dmg

  ubuntu24:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache depends artifacts
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/x86_64-linux-gnu
            depends/work
            depends/sources
          key: depends-${{ runner.os }}-linux64-${{ hashFiles('depends/packages/**', 'depends/hosts/**', 'depends/**.mk', 'depends/Makefile') }}
          restore-keys: |
            depends-${{ runner.os }}-linux64-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-linux64-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-linux64-

      - name: Update apt repos
        run: sudo apt-get update

      - name: Install base dependencies
        run: |
          sudo apt-get install -y \
          build-essential xutils-dev libtool gperf autotools-dev automake pkg-config \
          bsdmainutils libattr1-dev make automake bison byacc cmake curl \
          g++-multilib binutils-gold python3 ccache

      - name: Enable ccache wrappers
        run: |
          sudo /usr/sbin/update-ccache-symlinks || true
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
        env:
          CCACHE_DIR: ~/.ccache

      - name: Export toolchain env
        run: |
          echo "CC=gcc"        >> $GITHUB_ENV
          echo "CXX=g++"       >> $GITHUB_ENV
          echo "AR=ar"         >> $GITHUB_ENV
          echo "RANLIB=ranlib" >> $GITHUB_ENV
          echo "STRIP=strip"   >> $GITHUB_ENV
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Build depends
        run: |
          cd depends/
          make -j4 HOST=x86_64-linux-gnu

      - name: Auto generate
        run: ./autogen.sh

      - name: configure
        run: |
          CONFIG_SITE=$PWD/depends/x86_64-linux-gnu/share/config.site \
          ./configure --enable-scrypt-sse2 --disable-bench --disable-tests \
          --disable-dependency-tracking --disable-werror \
          --prefix="$(pwd)/depends/x86_64-linux-gnu" \
          --bindir="$(pwd)/release/bin" \
          --libdir="$(pwd)/release/lib"

      - name: make
        run: make -j4

      - name: strip
        run: |
          cd ./src && strip verged verge-cli verge-tx
          cd ./qt && strip verge-qt

      - name: ccache stats
        run: ccache -s || true
        env:
          CCACHE_DIR: ~/.ccache

      - uses: actions/upload-artifact@v4
        with:
          name: verge-ubuntu24
          path: |
            ./src/verged
            ./src/verge-cli
            ./src/verge-tx
            ./src/qt/verge-qt

  ubuntu22:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache depends artifacts
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/x86_64-linux-gnu
            depends/work
            depends/sources
          key: depends-${{ runner.os }}-linux64-22-${{ hashFiles('depends/packages/**', 'depends/hosts/**', 'depends/**.mk', 'depends/Makefile') }}
          restore-keys: |
            depends-${{ runner.os }}-linux64-22-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-linux64-22-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-linux64-22-

      - name: Update apt repos
        run: sudo apt-get update

      - name: Install base dependencies
        run: |
          sudo apt-get install -y \
          build-essential xutils-dev libtool gperf autotools-dev automake pkg-config \
          bsdmainutils libattr1-dev make automake bison byacc cmake curl \
          g++-multilib binutils-gold python3 ccache

      - name: Enable ccache wrappers
        run: |
          sudo /usr/sbin/update-ccache-symlinks || true
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
        env:
          CCACHE_DIR: ~/.ccache

      - name: Build depends
        run: cd depends/ && make -j4 HOST=x86_64-linux-gnu

      - name: Auto generate
        run: ./autogen.sh

      - name: configure
        run: CONFIG_SITE=$PWD/depends/x86_64-linux-gnu/share/config.site ./configure --enable-scrypt-sse2 --disable-bench --disable-tests --disable-dependency-tracking --disable-werror --prefix=`pwd`/depends/x86_64-linux-gnu --bindir=`pwd`/release/bin --libdir=`pwd`/release/lib

      - name: make
        run: make -j4

      - name: strip
        run: cd ./src && strip verged verge-cli verge-tx && cd ./qt && strip verge-qt

      - name: ccache stats
        run: ccache -s || true
        env:
          CCACHE_DIR: ~/.ccache

      - uses: actions/upload-artifact@v4
        with:
          name: verge-ubuntu22
          path: |
            ./src/verged
            ./src/verge-cli
            ./src/verge-tx
            ./src/qt/verge-qt

  windows32-ubuntu22: 
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache depends artifacts
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/i686-w64-mingw32
            depends/work
            depends/sources
          key: depends-${{ runner.os }}-mingw32-32-v7-${{ hashFiles('depends/packages/**', 'depends/hosts/**', 'depends/**.mk', 'depends/Makefile') }}
          restore-keys: |
            depends-${{ runner.os }}-mingw32-32-v7-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-mingw32-32-v7-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-mingw32-32-v7-

      - name: Update apt repos
        run: sudo apt-get update

      - name: Install base dependencies
        run: |
          sudo apt-get install -y \
          build-essential libtool gperf autotools-dev automake pkg-config \
          bsdmainutils curl git bison byacc python3 nsis ccache \
          g++-mingw-w64-i686 mingw-w64-i686-dev

      - name: Force Posix
        run: sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix

      - name: Build depends for MingW32 Cross Compile
        run: |
          unset STRIP || true
          cd depends/
          timeout 45m make HOST=i686-w64-mingw32 -j2 STRIP=strip V=1 --output-sync=recurse

      - name: Auto generate
        run: ./autogen.sh

      - name: Export toolchain env (target)
        run: |
          echo "CC=i686-w64-mingw32-gcc-posix"        >> $GITHUB_ENV
          echo "CXX=i686-w64-mingw32-g++-posix"       >> $GITHUB_ENV
          echo "AR=i686-w64-mingw32-ar"               >> $GITHUB_ENV
          echo "RANLIB=i686-w64-mingw32-ranlib"       >> $GITHUB_ENV
          echo "WINDRES=i686-w64-mingw32-windres"     >> $GITHUB_ENV
          echo "PKG_CONFIG=i686-w64-mingw32-pkg-config" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE"      >> $GITHUB_ENV
          echo "CCACHE_DIR=$HOME/.ccache"              >> $GITHUB_ENV
          echo "ARFLAGS=rcs"                           >> $GITHUB_ENV

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
        env:
          CCACHE_DIR: ~/.ccache

      - name: configure
        run: |
          CONFIG_SITE=$PWD/depends/i686-w64-mingw32/share/config.site \
          ./configure --prefix=/ --disable-bench --disable-tests

      - name: make (serialized, verbose, heartbeat)
        env:
          STRIP: ""
          V: "1"
        run: |
          set -e
          ( while true; do
            echo "---- heartbeat $(date) ----"
            ps -ef | egrep 'mingw|windres|ar|ranlib|ld|gcc|g\+\+|libtool' | grep -v egrep || true
            sleep 60
            done ) &
          HB=$!
          timeout 60m make -j1 --output-sync=recurse
          kill $HB || true

      - name: strip (cross)
        run: |
          cd ./src && i686-w64-mingw32-strip verged.exe verge-cli.exe verge-tx.exe
          cd ./qt && i686-w64-mingw32-strip verge-qt.exe

      - name: ccache stats
        run: ccache -s || true
        env:
          CCACHE_DIR: ~/.ccache

      - uses: actions/upload-artifact@v4
        with:
          name: verge-windows32-ubuntu22
          path: |
            /home/runner/work/verge/verge/src/verged.exe
            /home/runner/work/verge/verge/src/verge-cli.exe
            /home/runner/work/verge/verge/src/verge-tx.exe
            /home/runner/work/verge/verge/src/qt/verge-qt.exe


  windows64-ubuntu22:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache depends artifacts
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/x86_64-w64-mingw32
            depends/work
            depends/sources
          key: depends-${{ runner.os }}-mingw64-64-v7-${{ hashFiles('depends/packages/**', 'depends/hosts/**', 'depends/**.mk', 'depends/Makefile') }}
          restore-keys: |
            depends-${{ runner.os }}-mingw64-64-v7-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-mingw64-64-v7-${{ hashFiles('configure.ac', 'Makefile.am', 'src/**', 'build-aux/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-mingw64-64-v7-

      - name: Update apt repos
        run: sudo apt-get update

      - name: Install base dependencies
        run: |
          sudo apt-get install -y \
          build-essential libtool gperf autotools-dev automake pkg-config \
          bsdmainutils curl git bison byacc python3 nsis ccache \
          g++-mingw-w64-x86-64

      - name: Force Posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: Build depends for MingW64 Cross Compile
        run: |
          unset STRIP || true
          cd depends/
          timeout 45m make HOST=x86_64-w64-mingw32 -j2 STRIP=strip V=1 --output-sync=recurse

      - name: Auto generate
        run: ./autogen.sh

      - name: Export toolchain env
        run: |
          echo "CC=x86_64-w64-mingw32-gcc-posix"       >> $GITHUB_ENV
          echo "CXX=x86_64-w64-mingw32-g++-posix"      >> $GITHUB_ENV
          echo "AR=x86_64-w64-mingw32-ar"              >> $GITHUB_ENV
          echo "RANLIB=x86_64-w64-mingw32-ranlib"      >> $GITHUB_ENV
          echo "WINDRES=x86_64-w64-mingw32-windres"    >> $GITHUB_ENV
          echo "PKG_CONFIG=x86_64-w64-mingw32-pkg-config" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE"       >> $GITHUB_ENV
          echo "CCACHE_DIR=$HOME/.ccache"               >> $GITHUB_ENV
          echo "ARFLAGS=rcs"                            >> $GITHUB_ENV

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          echo 'max_size = 2G' > ~/.ccache/ccache.conf
          echo 'compression = true' >> ~/.ccache/ccache.conf
          ccache -z || true
        env:
          CCACHE_DIR: ~/.ccache

      - name: configure
        run: |
          CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site \
          ./configure --enable-scrypt-sse2 --prefix=/ --disable-bench --disable-tests

      - name: make (serialized, verbose, heartbeat)
        env:
          STRIP: ""
          V: "1"
        run: |
          set -e
          ( while true; do
            echo "---- heartbeat $(date) ----"
            ps -ef | egrep 'mingw|windres|ar|ranlib|ld|gcc|g\+\+|libtool' | grep -v egrep || true
            sleep 60
            done ) &
          HB=$!
          timeout 60m make -j1 --output-sync=recurse
          kill $HB || true

      - name: strip (cross)
        run: |
          cd ./src && x86_64-w64-mingw32-strip verged.exe verge-cli.exe verge-tx.exe
          cd ./qt && x86_64-w64-mingw32-strip verge-qt.exe

      - name: ccache stats
        run: ccache -s || true
        env:
          CCACHE_DIR: ~/.ccache

      - name: Dump config.log on failure
        if: failure()
        run: test -f config.log && sed -n '1,200p' config.log || true

      - uses: actions/upload-artifact@v4
        with:
          name: verge-windows64bit-ubuntu22
          path: |
            /home/runner/work/verge/verge/src/verged.exe
            /home/runner/work/verge/verge/src/verge-cli.exe
            /home/runner/work/verge/verge/src/verge-tx.exe
            /home/runner/work/verge/verge/src/qt/verge-qt.exe